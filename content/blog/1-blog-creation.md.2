+++
title = "1- Comment j'ai monté mon blog [Gcloud, terraform] ?"
date = 2018-07-05T14:01:24+02:00
draft = true
meta_img = "/images/image.jpg"
tags = ["gcloud","terraform","kubernetes"]
description = "Comment j'ai monté mon blog"
+++

Objective: mon blog soit sur K8s !

### Avant de commencer

J'utilise Kubernetes depuis + d'un an au boulot et j'ai envie d'avoir des répôts/outils/scripts pour mes prochaines utilisations. Ce blog est un prétexte pour faire tout ça.
Il y a beaucoup plus simple, par exemple [netlify](https://www.netlify.com/)

Je ne vais pas rentrer dans les détails sur les différents objets Google que je vais utiliser, ce n'est pas le but, simplement des liens vers la doc.

### Liste des courses

Cloud: [Google Cloud Platform](https://cloud.google.com/) avec [Terraform](https://www.terraform.io/)
Blog: [Hugo](https://gohugo.io/) sous [K8s](https://kubernetes.io/)
Code: Sur [github/kapelal](https://github.com/kapelal) et quelques images sur le [hub docker public](https://hub.docker.com/)

Un sensei m'a dit un jour *qui deploie à la main redéploie le lendemain*. On va éviter toutes actions manuelles et tout faire en IaC.

Un dépôt terraform avec toutes mon infra !

### Le marteau et la faucille

Pour voir, lister, ajouter ce que nous allons créer vous pouvez soit passer par les images docker, ce que je vais faire, soit telecharger les outils:

+ [gcloud](https://cloud.google.com/sdk/install)
+ [terraform](https://www.terraform.io/downloads.html)

### Jour de Paye

Avec une addresse `*.gmail.com`, il faut créer un compte [Google Cloud Platform](https://cloud.google.com/). 300 balles gratos ! C'est amplement suffisant pour se faire les dents.

### Multipass

Sur la [cloud console](https://console.cloud.google.com/) dans `IAM / Administration` -> `Compte de service` il faut créer une compte de service, genèrer une clé et la stocker sur son pc.

C'est fini, il n'y a plus aucune autre action manuelle

On en a fini avec l'artisanat, on continue à faire de l'infra mais sans les mains !

### VPC / DNS / K8s avec Terraform

Le code se trouve ici kapelal/terraform

Dans chaque dossier on a généralement quelques chose comme ca:

```
config.backend
main.tf
Makefile
outputs.tf
vars.tf
vars.tfvars
```

`config.backend` sert à la phase d'init, `terraform init`, pour créer/retrouver de la conf de notre [backend gcs](https://www.terraform.io/docs/backends/types/gcs.html) (qui est déclaré dans le `main.tf`) terraform pour le dossier. [Doc](https://www.terraform.io/docs/backends/config.html)

`main.tf` ce qu'on va créer.

`outputs.tf` sert à partager certaines variables. Par exemple
On peut voir les outputs de chaque dossier avec la commande:
```
terraform output
```
[Doc](https://www.terraform.io/intro/getting-started/outputs.html)

`var.tf` et `var.tfvars` déclaration et initialisation des variables. [Doc](https://www.terraform.io/intro/getting-started/variables.html)

Après chaque apply, terraform stocke l'état de votre infra dans un `.tfstate`. Sauvegarder c'est bien, mais si ca reste sur le pc c'est zéro !


Je résume ce qu'on va créer:
+ Une zone reseau, un vpc
+ Une IP externe, l'ip qui sera derrière `kapelal.io`
+ Une résolution DNS, pour la conexion nom de domaine -> ip
+ Un K8s

Un coup de make dans chaque dossier: vpc -> dns -> k8s

### Hugo sous K8s !

On arrive enfin au sujet de l'article, mettre hugo sous K8s.

besoin:

+ un container
+ une registry

Pour rester Iac, je ne veux pas écrire mon article sur un tool en ligne et appuyer sur poster, faire du clic clic c'est pas ouf ! Si je fais ca je dois avoir un proces de backup de mes datas en cas de merdouille... Non merci !

Je vais utiliser git pour stocker mes articles. Mais pas envie non plus qu'après un ~push~ merge sur master je dois faire des trucs avec les mains... c'est sale ! Je vais mettre en place une cron qui tout les X secondes récupère ma branch master et la fou sur mon hugo.

Tout ca sans sortir de K8s mais on va appeler Helm pour se simplifier la vie

### HELM

### La suite

Les prochains posts:

+ Hugo sous K8s
+ HTTPS avec Lets Encrypt
+ La CI
+ Logs avec Prometheus
+ Vault
